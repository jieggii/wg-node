import pathlib

from aiofile import async_open
from loguru import logger

from wg_node.config import config
from wg_node.database import Client
from wg_node.util import execute
from wg_node.wireguard.key import generate_keypair
from wg_node.wireguard.key_storage import KeyStorage

# These constants are defined here and not in any other place (e.g. not in ENV variables)
# mostly because they are not meant to be changed and also to prevent confusion

# remember to update mount point in docker-compose.yml when updating key storage path
_KEY_STORAGE_PATH = "/etc/wg-node/server-keys.json"
_WG_CONFIG_PATH = "/etc/wireguard/wg0.conf"

_WG_BASE_ADDRESS = "10.0.0.x"

_SERVER_INTERFACE_ADDRESS = _WG_BASE_ADDRESS.replace("x", str(1))
_SERVER_INTERFACE_LISTEN_PORT = 51820

_CLIENT_PERSISTENT_KEEPALIVE = 0
_CLIENT_DNS = "1.1.1.1"


def generate_client_address(taken_addresses: list[str]) -> str | None:
    """Generates free IP address for a new client."""

    # adding server address to list of taken addresses 'cause it cannot be used for new client
    taken_addresses.append(_SERVER_INTERFACE_ADDRESS)

    for x in range(2, 255):
        address = _WG_BASE_ADDRESS.replace("x", str(x))
        if address not in taken_addresses:
            return address
    return None


class WireguardConfig:
    """
    WireguardConfig is an interface to interact with Wireguard configuration files
    """

    _path: pathlib.PosixPath

    _private_key: str
    _public_key: str

    def __init__(self, path: str, *, private_key: str, public_key: str):
        self._path = pathlib.PosixPath(path)
        self._private_key = private_key
        self._public_key = public_key

    async def write(self, content: str) -> None:
        """Asynchronously writes content to the config file."""
        async with async_open(self._path, "w") as file:
            await file.write(content)

    def generate_config_content(self, clients: list[Client]) -> str:
        """Generates and returns Wireguard config according to clients and server settings."""

        content = f"""# this file was @generated by wg-node, and it is not meant to be changed by hand
 
[Interface]
PrivateKey = {self._private_key}
Address = {_SERVER_INTERFACE_ADDRESS}/24
ListenPort = {_SERVER_INTERFACE_LISTEN_PORT}

PreUp =
PostUp =  iptables -t nat -A POSTROUTING -s {_WG_BASE_ADDRESS.replace("x", "0")}/24 -o eth0 -j MASQUERADE; iptables -A INPUT -p udp -m udp --dport 51820 -j ACCEPT; iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT;
PreDown =
PostDown =
"""
        for i, client in enumerate(clients):
            if client.enabled:
                content += f"""
# client_id={client.client_id}
[Client]
PublicKey = {client.public_key}
PresharedKey = {client.preshared_key}
AllowedIPs = {client.address}/32
"""
        return content

    def generate_client_config(self, client: Client) -> str:
        """Generates and returns config for an individual client."""

        content = f"""[Interface]
PrivateKey = {client.private_key}
Address = {client.address}/24
DNS = {_CLIENT_DNS}

[Client]
PublicKey = {self._public_key}
PresharedKey = {client.preshared_key}
Endpoint = {config.Wireguard.PUBLIC_HOSTNAME}:{config.Wireguard.PUBLIC_PORT}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = {_CLIENT_PERSISTENT_KEEPALIVE}"""
        return content

    @staticmethod
    def sync() -> None:
        """Synchronizes Wireguard config."""
        execute("wg syncconf wg0 <(wg-quick strip wg0)")


# initialize server key storage
_key_storage = KeyStorage(path=_KEY_STORAGE_PATH)
_private_key, _public_key = None, None

if not _key_storage.exists():
    _private_key, _public_key = generate_keypair()
    _key_storage.store_keys(private_key=_private_key, public_key=_public_key)
    logger.info(f"generated and stored server keypair")

# initialize wireguard config
if not _private_key or not _public_key:
    _private_key, _public_key = _key_storage.read_keys()
WIREGUARD_CONFIG = WireguardConfig(path=_WG_CONFIG_PATH, private_key=_private_key, public_key=_public_key)
