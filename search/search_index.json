{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to wg-node documentation!","text":"<p>Deploy and manage your WireGuard nodes with one hand!</p> <p>Warning</p> <p>Work on wg-node and its documentation is still in progress. Please feel free to contribute in any way to this project.</p> <p>wg-node is an application which provides you a simple way to run and manage WireGuard node. Run in docker container and manage it effortlessly through HTTP REST API.</p> <p>You can set up multiple WireGuard nodes on different servers and manage them all safely and easily from a single machine.</p> <p>wg-node is mostly inspired by wg-easy, but is more minimalistic and has some noticeable key differences:</p> <ul> <li>No frontend UI, only HTTP REST API.</li> <li>All requests to the API must be RSA-signed using API client's private key,   whose public key is known by server running wg-node.</li> <li>MongoDB is used to store information about peers.</li> </ul> <p>The application can be run on any GNU/Linux machine whose kernel supports WireGuard (linux 3.10+).</p>"},{"location":"project-structure-and-architecture/","title":"Project structure and architecture","text":"<p>It is not necessary, but always useful to understand the project structure and architecture before using it!</p> <p>So, let's dive in!</p>"},{"location":"project-structure-and-architecture/#docker-containers","title":"Docker containers","text":"<p>The project architecture consists of two parts (and docker containers):</p> <ul> <li>wg-node - web server which listens for API requests and manages WireGuard config &amp; connections.</li> <li>wg-node-mongo - MongoDB instance where information about clients' is stored.   MongoDB's data directory will be mounted to <code>./.mongo-data</code> by default.</li> </ul>"},{"location":"project-structure-and-architecture/#project-directories-and-files-essentials","title":"Project directories and files (essentials)","text":""},{"location":"project-structure-and-architecture/#docker-secrets-secrets-directory","title":"Docker secrets (<code>./secrets</code> directory)","text":"<p>There are totally 4 docker secrets in this project:</p> <ul> <li><code>mongo/username</code> - username for the MongoDB container.</li> <li><code>mongo/password</code> - password for the MongoDB container.</li> <li><code>mongo/database</code> - database name for the MongoDB container.</li> <li><code>node/root_api_user_public_key</code> - root API user's public key.</li> </ul>"},{"location":"project-structure-and-architecture/#file-containing-environmental-variables-which-are-necessary-to-be-set-env-file","title":"File containing environmental variables which are necessary to be set (<code>./.env</code> file)","text":"<p>At the moment, there is only one environmental variable which is necessary to be set up before running wg-node. It is <code>WIREGUARD_PUBLIC_HOSTNAME</code> and it has to be specified inside <code>./.env</code> file. The easiest way to create this file is to use the example file (<code>.env.example</code>):</p> <pre><code>cp ./.env.example ./.env\n</code></pre> .env<pre><code># public hostname of the server\nWIREGUARD_PUBLIC_HOSTNAME=\n</code></pre> <p>Other useful environmental variables can be found inside <code>docker-compose.yml</code>. But it is more likely that you will never need to update them.</p>"},{"location":"project-structure-and-architecture/#api-users","title":"API users","text":"<p>When you start wg-node for the first time, you already have only one API user\u2014it is root API user. It's public key is located in <code>./secrets/node/root_api_user_public_key</code>. The only difference between root API user and other API users is that only root user can create and delete API users.</p> <p>Okay! I think it is everything you need to know for now about the project structure and architecture. Now you have an image of what it looks like. :)</p>"},{"location":"api/clients/","title":"wg-node API client libraries","text":"<p>Warning</p> <p>The project on it's early stage of release.  I appreciate if you write your own wg-node client library  for your favorite programming language!</p> <p>At this moment only one API client library for wg-node is available.</p> Programming language wg-node API client library Python python-wg-node-client"},{"location":"api/introduction/","title":"Introduction to wg-node HTTP API","text":"<p>Using wg-node HTTP API you can easily create and manage new WireGuard peers, get useful information about node.</p>"},{"location":"api/introduction/#about-wg-node-api","title":"About wg-node API","text":"<p>Info</p> <p>wg-node API follows the REST standard. All requests to the API are executed by means of HTTP requests.</p> <p>When using wg-node API you can operate with the following objects:</p> <ul> <li><code>node</code> - WireGuard node itself</li> <li><code>api-user</code> - API users</li> <li><code>peer</code> - WireGuard peers (also known as clients)</li> </ul> <p>The API provides convenient methods to manipulate with them all.</p> <p>Info</p> <p>List of available API methods can be found here.</p>"},{"location":"api/introduction/#signing-api-request","title":"Signing API request","text":"<p>Important thing to know: all API requests must be signed using API user's private key. What does it mean?</p> <ol> <li>HTTP request must contain <code>API-User-Public-Key</code> header containing node API user's public key.</li> <li>HTTP request must contain <code>Request-Signature</code> header containing signature of the request.</li> </ol>"},{"location":"api/introduction/#how-to-sign-request-parameters","title":"How to sign request parameters?","text":"<p>It is really simple and also silly. The recipe:</p>"},{"location":"api/introduction/#step-1-normalize-all-request-params","title":"Step 1. Normalize all request params","text":"<p>Take path params, query params and request body in JSON format with keys sorted as strings and remove all spaces and newlines from them (I call it normalization in the wg-node source code).</p> <p>For example:</p> <ul> <li><code>{\"boo\": \"hello\", \"aaa\": 7}</code> -&gt; <code>{\"aaa\":7,\"boo\":\"hello\"}</code></li> <li><code>{}</code> -&gt; <code>{}</code></li> </ul>"},{"location":"api/introduction/#step-2-build-one-string","title":"Step 2. Build one string","text":"<p>Create a new string concatenating the following strings strictly in this order and adding <code>;</code> separator between them:</p> <ol> <li>HTTP method you are using in upper case (e.g. <code>POST</code>)</li> <li>Hostname you are sending request to (e.g. <code>8.8.8.8</code> or <code>example.com</code>)</li> <li>Normalized path params (e.g. <code>{\"something\":\"123\"}</code>)</li> <li>Normalized query params (e.g. <code>{\"foo\":\"bar\"}</code>)</li> <li>Normalized request body (e.g. <code>{\"bruh\":\"what\"}</code>)</li> </ol> <p>For example, if we want to delete peer <code>peer-1</code> from wg-node running on <code>example.com</code>, we send the following HTTP request:</p> <p><code>DELETE http://example.com/peer/peer-1</code>.</p> <p>It means we have</p> <ul> <li>HTTP method <code>DELETE</code></li> <li>Hostname <code>example.com</code></li> <li>Normalized path params: <code>{\"peer_id\":\"peer-1\"}</code></li> <li>Normalized query params: <code>{}</code></li> <li>Normalized request body: <code>{}</code></li> </ul> <p>Then the resulting concatenated string will be:</p> <p><code>DELETE;example.com;{\"peer_id\":\"peer-1\"};{};{}</code></p>"},{"location":"api/introduction/#step-3-create-signature","title":"Step 3. Create signature","text":"<p>Sign the string you got in the previous step using RSA algorithm and SHA-256 as the hash method (#TODO).</p>"},{"location":"api/introduction/#step-4-set-request-headers","title":"Step 4. Set request headers","text":"<p>Tada! Put your API user's public key in the <code>API-User-Public-Key</code> header and HEX value of signature you've made in <code>Request-Signature</code> header and finally send your request!</p>"},{"location":"api/introduction/#why-should-all-api-requests-to-wg-node-be-signed","title":"Why should all API requests to wg-node be signed?","text":"<p>API request params signing is a layer of security which is made to ensure that API requests come from trusted sources and are not modified on their way by third parties.</p> <p>Warning</p> <p>I am not a very confident developer, especially in the security area, so if you find this decision strange or incorrect, please feel free to discuss this topic in the project issues on GitHub.</p>"},{"location":"api/methods/","title":"wg-node API methods","text":"<p>Failure</p> <p>This page is not written yet.</p>"},{"location":"usage/manage-your-wg-node-instance/","title":"Manage your wg-node instance","text":"<p>When everything is set up properly and already running, it is time to send commands to the wg-node instance and have some fun. The only way to do it is to use wg-node API. You can read more about it in the next section.</p> <p>Tip</p> <p>You can skip to the wg-node API client libraries section if you don't want to dig that deep.  Choose a library suitable for the programming language you use  and send requests to wg-node without thinking how the wg-node API works.</p>"},{"location":"usage/run-wg-node-on-your-server/","title":"Run wg-node on your server","text":"<p>When everything is set up properly, it's time to finally run WireGuard node.</p> <p>Simply run the following command to build the necessary docker containers:</p> <pre><code>docker compose build\n</code></pre> <p>And another one to bring them up:</p> <pre><code>docker compose up\n</code></pre> <p>That's it! By default, web server is listening for port 80 and WireGuard is on port 51820. </p>"},{"location":"usage/set-up-wg-node-on-your-server/","title":"Set up wg-node on your server","text":"<p>Follow these simple steps to set up wg-node on your own server.</p>"},{"location":"usage/set-up-wg-node-on-your-server/#step-1-ensure-that-your-kernel-supports-wireguard","title":"Step 1. Ensure that your kernel supports WireGuard","text":"<p>From the official WireGuard documentation</p> <p>WireGuard requires Linux \u22653.10, with the following configuration options, which are likely already configured in your kernel, especially if you're installing via distribution packages.</p> <ul> <li><code>CONFIG_NET</code> for basic networking support</li> <li><code>CONFIG_INET</code> for basic IP support</li> <li><code>CONFIG_NET_UDP_TUNNEL</code> for sending and receiving UDP packets</li> <li><code>CONFIG_CRYPTO_ALGAPI</code> for crypto_xor</li> </ul>"},{"location":"usage/set-up-wg-node-on-your-server/#step-2-install-docker-and-docker-compose-plugin","title":"Step 2. Install docker and docker compose plugin","text":"<p>wg-node is being run in docker containers, so the only dependencies you need to install are docker and docker compose plugin.</p> <p>You can find installation instructions by clicking on these links:</p> <ul> <li>Installation instructions for docker</li> <li>Installation instructions for docker compose plugin</li> </ul>"},{"location":"usage/set-up-wg-node-on-your-server/#step-3-set-up-wireguard_public_hostname-environmental-variable-in-the-env-file","title":"Step 3. Set up <code>WIREGUARD_PUBLIC_HOSTNAME</code> environmental variable in the <code>.env</code> file","text":"<p><code>WIREGUARD_PUBLIC_HOSTNAME</code> environmental variable should be set to your machine's public IP or domain name, which is associated with the machine, for example <code>example.com</code> or <code>1.2.3.4</code>.</p> <p>The variable should be located in the <code>./.env</code> file. You can use <code>./.env.example</code> file as template to avoid typos:</p> <pre><code>cp ./.env.example ./.env\n</code></pre> .env<pre><code># public hostname of the server\nWIREGUARD_PUBLIC_HOSTNAME=&lt;SERVER-IP-ADDRESS-OR-DOMAIN-NAME&gt;\n</code></pre>"},{"location":"usage/set-up-wg-node-on-your-server/#step-4-set-up-docker-secrets","title":"Step 4. Set up docker secrets","text":"<p>Tip</p> <p>It would be useful to read about docker secrets from the docker documentation, if you have never heard about them.</p>"},{"location":"usage/set-up-wg-node-on-your-server/#step-41-create-directory-for-docker-secrets","title":"Step 4.1. Create directory for docker secrets","text":"<p>At first create <code>./secrets</code> directory and some subdirectories inside it, where all docker secrets will be located:</p> <pre><code>mkdir secrets\nmkdir secrets/node\nmkdir secrets/mongo\n</code></pre>"},{"location":"usage/set-up-wg-node-on-your-server/#step-42-set-up-secrets-for-the-mongodb-container-wg-node-mongo","title":"Step 4.2 Set up secrets for the MongoDB container (<code>wg-node-mongo</code>)","text":"<p><code>mongo/username</code>, <code>mongo/password</code> and <code>mongo/username</code> secrets stand for MongoDB user credentials and database name. You need to come up with them yourself!</p> <p>Then write them to the files:</p> <pre><code>echo \"&lt;USERNAME&gt;\" &gt;&gt; \"./secrets/mongo/username\"\necho \"&lt;PASSWORD&gt;\" &gt;&gt; \"./secrets/mongo/password\"\necho \"&lt;DATABASE-NAME&gt;\" &gt;&gt; \"./secrets/mongo/database\"\n</code></pre>"},{"location":"usage/set-up-wg-node-on-your-server/#step-43-set-up-noderoot_api_user_public_key-secret","title":"Step 4.3 Set up <code>node/root_api_user_public_key</code> secret","text":"<p><code>node/root_api_user_public_key</code> docker secret is a file, which contains public key of the root API user (an API user is any single teapot or computer which has its own public and private keys and whose public key is known by wg-node instance.</p> <p>From the note above, we can see that we have to generate keypair somehow, and write public key to <code>./secrets/node/root_api_user_public_key</code>.</p> <p>Okay... Let's try!</p> <p>To be continued...</p>"}]}