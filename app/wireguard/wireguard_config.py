import pathlib
import subprocess

from app.models import Peer
from app.config import config
from . import KeyStorage

#
# def _execute_command(command: str):
#     subprocess.run(command)
#
#     # wg set wg0 peer "K30I8eIxuBL3OA43Xl34x0Tc60wqyDBx4msVm8VLkAE=" allowed-ips 10.101.1.2/32
#
#


class WireguardConfig:
    path: pathlib.PosixPath

    private_key: str
    public_key: str

    content: str | None = None

    def __init__(self, path: str, key_storage: KeyStorage):
        self.path = pathlib.PosixPath(path)
        self.private_key, self.public_key = key_storage.read_keys()

    def save(self):
        with open(self.path, "w", encoding="utf-8") as file:
            file.write(self.content)

    def regenerate(self, peers: list[Peer]):
        server_address = config.WG.BASE_ADDRESS.replace("x", "1")
        self.content = f"""# This file has been automatically generated by wireguard-node, do not edit manually.
        
        # Server settings
        [Interface]
        PrivateKey = {self.private_key}
        Address = {server_address}/24
        ListenPort = {config.WG.INTERFACE_LISTEN_PORT}
        # PreUp = {1}
        # PostUp = {2}
        # PreDown = {3}
        # PostDown = {4}
        """

        for peer in peers:
            self.content += f"""
            # Peer uuid: {peer.uuid}
            [Peer]
            PublicKey = {peer.public_key}
            PresharedKey = {peer.preshared_key}
            AllowedIPs = {peer.address}/32`;
            """

    def sync(self):
        subprocess.run()


